package jp.ac.tsukuba.cs.mdl.dnn4j.layers;

import jp.ac.tsukuba.cs.mdl.numj.core.NdArray;
import jp.ac.tsukuba.cs.mdl.numj.core.NumJ;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;

public class ConvolutionTest {

    Convolution conv;

    @Before
    public void init() {
        conv = new Convolution(
                NumJ.arange(9, 1 * 3 * 3),
                NumJ.arange(1, 9), 9, 3, 3, 1, 0);
    }

//    @Test
    public void forwardTest() {
        NdArray convForward = conv.forward(NumJ.arange(4, 1, 4, 4));
        Assert.assertTrue(
                NumJ.create(new double[]{
                        258., 294.,
                        402., 438.,

                        664., 781.,
                        1132., 1249.,

                        1070., 1268.,
                        1862., 2060.,

                        1476., 1755.,
                        2592., 2871.,

                        1882., 2242.,
                        3322., 3682.,

                        2288., 2729.,
                        4052., 4493.,

                        2694., 3216.,
                        4782., 5304.,

                        3100., 3703.,
                        5512., 6115.,

                        3506., 4190.,
                        6242., 6926.,


                        834., 870.,
                        978., 1014.,

                        2536., 2653.,
                        3004., 3121.,

                        4238., 4436.,
                        5030., 5228.,

                        5940., 6219.,
                        7056., 7335.,

                        7642., 8002.,
                        9082., 9442.,

                        9344., 9785.,
                        11108., 11549.,

                        11046., 11568.,
                        13134., 13656.,

                        12748., 13351.,
                        15160., 15763.,

                        14450., 15134.,
                        17186., 17870.,


                        1410., 1446.,
                        1554., 1590.,

                        4408., 4525.,
                        4876., 4993.,

                        7406., 7604.,
                        8198., 8396.,

                        10404., 10683.,
                        11520., 11799.,

                        13402., 13762.,
                        14842., 15202.,

                        16400., 16841.,
                        18164., 18605.,

                        19398., 19920.,
                        21486., 22008.,

                        22396., 22999.,
                        24808., 25411.,

                        25394., 26078.,
                        28130., 28814.,

                        1986., 2022.,
                        2130., 2166.,

                        6280., 6397.,
                        6748., 6865.,

                        10574., 10772.,
                        11366., 11564.,

                        14868., 15147.,
                        15984., 16263.,

                        19162., 19522.,
                        20602., 20962.,

                        23456., 23897.,
                        25220., 25661.,

                        27750., 28272.,
                        29838., 30360.,

                        32044., 32647.,
                        34456., 35059.,

                        36338., 37022.,
                        39074., 39758.
                }, 4, 9, 2, 2)
                        .sub(convForward).elementwise(Math::abs).sum() < 1e-10
        );

        Assert.assertArrayEquals(new int[]{4, 9, 2, 2}, convForward.shape());

    }

//    @Test
    public void backwardTest() {


        conv.forward(NumJ.arange(4, 1, 4, 4));

        NdArray convOut = conv.backward(NumJ.arange(4, 9, 2, 2));

        Assert.assertTrue(NumJ.create(new double[]{
                7344., 15156., 15453., 7974.,
                15768., 32517., 33147., 17091.,
                16686., 34407., 35037., 18063.,
                8964., 18468., 18801., 9684.,


                19008., 38808., 39753., 20286.,
                40068., 81765., 83691., 42687.,
                42930., 87543., 89469., 45603.,
                22572., 46008., 46989., 23940.,


                30672., 62460., 64053., 32598.,
                64368., 131013., 134235., 68283.,
                69174., 140679., 143901., 73143.,
                36180., 73548., 75177., 38196.,


                42336., 86112., 88353., 44910.,
                88668., 180261., 184779., 93879.,
                95418., 193815., 198333., 100683.,
                49788., 101088., 103365., 52452.
        }, 4, 1, 4, 4).sub(convOut).elementwise(Math::abs).sum() < 1e-10);

        Assert.assertArrayEquals(new int[]{4, 1, 4, 4}, convOut.shape());

        Assert.assertTrue(NumJ.create(new double[]{
                35088., 35976., 36864.,
                38640., 39528., 40416.,
                42192., 43080., 43968.,


                36784., 37736., 38688.,
                40592., 41544., 42496.,
                44400., 45352., 46304.,


                38480., 39496., 40512.,
                42544., 43560., 44576.,
                46608., 47624., 48640.,


                40176., 41256., 42336.,
                44496., 45576., 46656.,
                48816., 49896., 50976.,


                41872., 43016., 44160.,
                46448., 47592., 48736.,
                51024., 52168., 53312.,


                43568., 44776., 45984.,
                48400., 49608., 50816.,
                53232., 54440., 55648.,


                45264., 46536., 47808.,
                50352., 51624., 52896.,
                55440., 56712., 57984.,


                46960., 48296., 49632.,
                52304., 53640., 54976.,
                57648., 58984., 60320.,


                48656., 50056., 51456.,
                54256., 55656., 57056.,
                59856., 61256., 62656.
        }, 9, 1 * 3 * 3).sub(conv.getWeightGrad()).elementwise(Math::abs).sum() < 1e-10);

        Assert.assertArrayEquals(new int[]{9, 1 * 3 * 3}, conv.getWeightGrad().shape());

        Assert.assertTrue(NumJ.create(new double[]{
                888, 952, 1016, 1080, 1144, 1208, 1272, 1336, 1400
        }, 1, 9).sub(conv.getBiasGrad()).elementwise(Math::abs).sum() < 1e-10);

        Assert.assertArrayEquals(new int[]{1, 9}, conv.getBiasGrad().shape());
    }
}
